
# Generated by CodiumAI
from unittest.mock import MagicMock
from cognitrix.agents.base import Agent
from cognitrix.providers.base import LLM
from cognitrix.tools import Tool, Calculator


import pytest

class TestCallTools:

    # Successfully processes a single tool call
    @pytest.mark.asyncio
    async def test_successfully_processes_single_tool_call(self):
        # mock_llm = MagicMock(spec=LLM)
        agent = await Agent.load_agent('Assistant')
        if agent:
            # mock_tool = MagicMock(spec=Tool)
            # mock_tool.name = 'mock_tool'
            # mock_tool.run = MagicMock(return_value='mock_result')
            # agent.get_tool_by_name = MagicMock(return_value=mock_tool)
            agent.tools = [Calculator]

            tool_calls = {
                'tool': {'name': 'calculator', 'arguments': {'math_expression': '5 + 5'}},
            }

            result = await agent.call_tools(tool_calls)

            assert result['type'] == 'tool_calls_result' # type: ignore
            assert '10' in result['result'] # type: ignore


    @pytest.mark.asyncio
    async def test_handles_empty_tool_calls_gracefully(self):
        agent = await Agent.load_agent('Assistant')

        if agent:
            tool_calls = {}
        
            result = await agent.call_tools(tool_calls)
            print('--result', result)
        
            assert 'Not a json object' in result